package com.ezworking.wechatunlock.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import com.ezworking.wechatunlock.domain.ContactResult;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "CONTACT_RESULT".
*/
public class ContactResultDao extends AbstractDao<ContactResult, String> {

    public static final String TABLENAME = "CONTACT_RESULT";

    /**
     * Properties of entity ContactResult.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Identifier = new Property(0, String.class, "identifier", true, "IDENTIFIER");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Phone = new Property(2, String.class, "phone", false, "PHONE");
        public final static Property Wechat = new Property(3, String.class, "wechat", false, "WECHAT");
    };


    public ContactResultDao(DaoConfig config) {
        super(config);
    }
    
    public ContactResultDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CONTACT_RESULT\" (" + //
                "\"IDENTIFIER\" TEXT PRIMARY KEY NOT NULL ," + // 0: identifier
                "\"NAME\" TEXT," + // 1: name
                "\"PHONE\" TEXT," + // 2: phone
                "\"WECHAT\" TEXT);"); // 3: wechat
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CONTACT_RESULT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ContactResult entity) {
        stmt.clearBindings();
 
        String identifier = entity.getIdentifier();
        if (identifier != null) {
            stmt.bindString(1, identifier);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(3, phone);
        }
 
        String wechat = entity.getWechat();
        if (wechat != null) {
            stmt.bindString(4, wechat);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ContactResult entity) {
        stmt.clearBindings();
 
        String identifier = entity.getIdentifier();
        if (identifier != null) {
            stmt.bindString(1, identifier);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(3, phone);
        }
 
        String wechat = entity.getWechat();
        if (wechat != null) {
            stmt.bindString(4, wechat);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public ContactResult readEntity(Cursor cursor, int offset) {
        ContactResult entity = new ContactResult( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // identifier
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // phone
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // wechat
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ContactResult entity, int offset) {
        entity.setIdentifier(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPhone(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setWechat(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final String updateKeyAfterInsert(ContactResult entity, long rowId) {
        return entity.getIdentifier();
    }
    
    @Override
    public String getKey(ContactResult entity) {
        if(entity != null) {
            return entity.getIdentifier();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
